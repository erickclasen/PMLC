erick@media-pc ~/ml/numpy-warmup-predict-y-from-x $ python predict-y-from-x.2.py 
X and Y numpy arrays
(array([[  0,   1,   4,   9,  16,  25,  36,  49,  64,  81],
       [  1,   4,   9,  16,  25,  36,  49,  64,  81, 100]]), array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],
       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10]]))
--------------
(0, 3869392.0772995735)
(10000, 15.584966312554718)
(20000, 0.17160802343448531)
(30000, 0.002557752109306523)
(40000, 4.4853853810733946e-05)
(50000, 8.8828583958849437e-07)
(60000, 1.9169941861753417e-08)
(70000, 4.3912900485850417e-10)
(80000, 1.0517170043915021e-11)
(90000, 2.6139938281241627e-13)
(100000, 6.7176437924934538e-15)
(110000, 1.7807079976753374e-16)
(120000, 4.8589395269958829e-18)
(130000, 1.3943447339998652e-19)
(140000, 5.8074169883046454e-21)
(150000, 1.0746375529303864e-21)
(160000, 7.0556652348759901e-22)
(170000, 6.1896295939806636e-22)
(180000, 5.6500365232426787e-22)
(190000, 5.3943941798858776e-22)

Results X
[[  0   1   4   9  16  25  36  49  64  81]
 [  1   4   9  16  25  36  49  64  81 100]]
Y  ---------------
[[ 0  1  2  3  4  5  6  7  8  9]
 [ 1  2  3  4  5  6  7  8  9 10]]
Predicated Y ----------------
[[ -5.31485966e-12   1.00000000e+00   2.00000000e+00   3.00000000e+00
    4.00000000e+00   5.00000000e+00   6.00000000e+00   7.00000000e+00
    8.00000000e+00   9.00000000e+00]
 [  1.00000000e+00   2.00000000e+00   3.00000000e+00   4.00000000e+00
    5.00000000e+00   6.00000000e+00   7.00000000e+00   8.00000000e+00
    9.00000000e+00   1.00000000e+01]]
-----------------------
Load x with new array and make a prediction with model weights set
(array([[ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81]]), array([[ -5.31485966e-12,   1.00000000e+00,   2.00000000e+00,
          3.00000000e+00,   4.00000000e+00,   5.00000000e+00,
          6.00000000e+00,   7.00000000e+00,   8.00000000e+00,
          9.00000000e+00]]))

